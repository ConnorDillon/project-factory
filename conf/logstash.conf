input {
  file {
    path => "/Users/connor/Development/rust/project-factory/dev/input"
    codec => json
  }
}

filter {
  if [plugin] == "pecmd" {
    date {
      match => ["[data][PreviousRun5]", "ISO8601"]
      target => "[data][PreviousRun5]"
    }
    date {
      match => ["[data][PreviousRun4]", "ISO8601"]
      target => "[data][PreviousRun4]"
    }
    date {
      match => ["[data][PreviousRun3]", "ISO8601"]
      target => "[data][PreviousRun3]"
    }
    date {
      match => ["[data][PreviousRun2]", "ISO8601"]
      target => "[data][PreviousRun2]"
    }
    date {
      match => ["[data][PreviousRun1]", "ISO8601"]
      target => "[data][PreviousRun1]"
    }
    date {
      match => ["[data][PreviousRun0]", "ISO8601"]
      target => "[data][PreviousRun0]"
    }
    date {
      match => ["[data][LastRun]", "ISO8601"]
      target => "[data][LastRun]"
    }
    mutate {
      rename => {
        "[data][RunCount]" => "[prefetch][run_count]"
        "[data][ExecutableName]" => "[prefetch][executable_name]"
        "[data][Hash]" => "[prefetch][hash]"
        "[data][Version]" => "[prefetch][version]"
        "[data][LastRun]" => "[prefetch][runs]"
        "[data][Volume0Created]" => "[volume][created]"
        "[data][Volume0Name]" => "[volume][name]"
        "[data][Volume0Serial]" => "[volume][serial]"
        "[data][Directories]" => "[prefetch][directories]"
        "[data][FilesLoaded]" => "[prefetch][files_loaded]"
        "path" => "[file][path]"
        "type" => "[file][mime_type]"
      }
      merge => {
        "[data][PreviousRun5]" => "[data][PreviousRun6]"
        "[data][PreviousRun4]" => "[data][PreviousRun5]"
        "[data][PreviousRun3]" => "[data][PreviousRun4]"
        "[data][PreviousRun2]" => "[data][PreviousRun3]"
        "[data][PreviousRun1]" => "[data][PreviousRun2]"
        "[data][PreviousRun0]" => "[data][PreviousRun1]"
        "[prefetch][runs]" => "[data][PreviousRun0]"
      }
      split => {
        "[prefetch][directories]" => ", "
        "[prefetch][files_loaded]" => ", "
      }
      remove_field => ["@timestamp", "host"]
    }
    clone {
      clones => ["prefetch_event"]
    }
    grok {
      match => {
        "[file][path]" => "(?<[file][directory]>.*\\.*)\\(?<[file][name]>.*)"
      }
    }
  }

  if "prefetch_event" in [tags] {
    split {
      field => "[prefetch][runs]"
    }
    mutate {
      rename => {
        "[prefetch][runs]" => "@timestamp"
        "[prefetch][executable_name]" => "[file][name]"
        "[file][path]" => "[log][file][path]"
      }
      add_field => {
        "[event][kind]" => "event"
        "[event][category]" => "process"
        "[event][type]" => "start"
        "[event][action]" => "process-start"
        "[event][outcome]" => "success"
      }
      copy => {
        "@timestamp" => "[process][start]"
        "[file][name]" => "[process][name]"
      }
      remove_field => ["volume", "prefetch", "type", "[file][directory]", "[file][mime_type]"]
    }
  }
  mutate { remove_field => ["data", "@version", "plugin", "tags"] }
}

output {
  stdout { }
  # elasticsearch { hosts => ["localhost:9200"] }
  # file {
  #   path => "/Users/connor/Development/rust/project-factory/dev/output"
  #   codec => json
  # }
}
